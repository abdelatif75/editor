generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model ProductCategory {
  id               String            @id            @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt
  name             String
  description      String?           @db.Text
  tier             Int               @default(1)
  parentCategoryId String?
  parentCategory   ProductCategory?  @relation("ProductCategoryToProductCategory", fields: [parentCategoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  productCategory  ProductCategory[] @relation("ProductCategoryToProductCategory")
  products         Products[]

  @@unique([name, parentCategoryId])
  @@index([tier])
  @@map("productCategories")
}

model Products {
  id               String             @id   @default(uuid())
  title            String
  discription      String?
  categoryId       String
  category         ProductCategory    @relation(fields: [categoryId],references: [id],onDelete: NoAction)
  productColor     ProductColor[]
}

model ProductColor {
  id                 String               @id   @default(uuid())
  color              String
  productId          String
  product            Products             @relation(fields: [productId], references: [id], onDelete:Cascade )
  productImageGroup  ProductImageGroup[]
  productAtt         ProductAtt[]
}

model ProductAtt {
  id                 String       @id   @default(uuid())
  name               String
  parentProductAttId String?
  parentProductAtt   ProductAtt?  @relation("ProductAttToProductAtt", fields: [parentProductAttId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  productAtt         ProductAtt[] @relation("ProductAttToProductAtt")
  productColorId     String
  productColor       ProductColor @relation(fields: [productColorId], references: [id],onDelete: Cascade)

  @@unique([name, parentProductAttId])
  @@map("productAtts")
}

model ProductImageGroup {
  id               String             @id   @default(uuid())
  productColorId   String
  productColor     ProductColor @relation(fields: [productColorId], references: [id],onDelete: Cascade)
  productImg       ProductImg[]
}

model ProductImg {
  id                  String           @id   @default(uuid())
  title               String
  imageFullPath       String
  dx                  Int?
  dy                  Int?
  dh                  Int?
  dw                  Int?
  x1                  Int?
  y1                  Int?
  x2                  Int?
  y2                  Int?
  productImageGroupId String
  productImageGroup   ProductImageGroup @relation(fields: [productImageGroupId], references: [id],onDelete: Cascade)
}
